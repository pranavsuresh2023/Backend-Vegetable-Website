using AssignmentProject.Models;using AssignmentProject.Services.Contract;using AssignmentProject.Utilities;using BCrypt.Net;using Azure;using System.IdentityModel.Tokens.Jwt;using System.ComponentModel.DataAnnotations;using System.Text;using Microsoft.Extensions.Configuration;using Microsoft.IdentityModel.Tokens;using System.Security.Claims;using Microsoft.EntityFrameworkCore;using AssignmentProject.Utilities;namespace AssignmentProject.Services.Implimentation{    public class UserService : IuserService    {        private readonly AssignmentContext _assignmentContext;        private readonly IConfiguration _configuration;        public UserService(AssignmentContext assignmentContext, IConfiguration configuration)        {            _assignmentContext = assignmentContext;            _configuration = configuration;        }        public ResponseUser AddData(ResponseUser responseUser)        {            try            {                var hashedPassword = BCrypt.Net.BCrypt.HashPassword(responseUser.UserPassword);                var newCustomer = new UserDetail                {                    UserPassword = hashedPassword,                    Email = responseUser.Email,                };                _assignmentContext.UserDetails.Add(newCustomer);                _assignmentContext.SaveChanges();                responseUser.UserPassword = hashedPassword;                return responseUser;            }            catch (Exception EX)            {                throw EX;            }        }        public string Verify(ResponseUser responseUser)        {            var storedCustomer = _assignmentContext.UserDetails.FirstOrDefault(c => c.Email == responseUser.Email);            if (storedCustomer.Email != responseUser.Email)            {                return "Not Found";            }            if (!BCrypt.Net.BCrypt.Verify(responseUser.UserPassword, storedCustomer.UserPassword))            {                return "Wrong Password";            }            var token = CreateToken(storedCustomer);            return token;        }        public string CreateToken(UserDetail login)        {            List<Claim> claims = new List<Claim>            {                 new Claim(ClaimTypes.Name,login.Email)            };            var key = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(               _configuration.GetSection("AppSettings:Token").Value));            var cred = new SigningCredentials(key, SecurityAlgorithms.HmacSha512Signature);            var token = new JwtSecurityToken(                claims: claims,                expires: DateTime.Now.AddMonths(1),                signingCredentials: cred);            var jwt = new JwtSecurityTokenHandler().WriteToken(token);            return jwt;        }    }}